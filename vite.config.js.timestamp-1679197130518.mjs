// vite.config.js
import { defineConfig, loadEnv } from "file:///E:/open-source/V-Admin/node_modules/.pnpm/vite@3.2.5_less@4.1.3/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/open-source/V-Admin/node_modules/.pnpm/@vitejs+plugin-vue@3.2.0_vite@3.2.5+vue@3.2.45/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///E:/open-source/V-Admin/node_modules/.pnpm/registry.npmmirror.com+@vitejs+plugin-vue-jsx@3.0.0_vite@3.2.5+vue@3.2.45/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import { resolve } from "path";
import { createSvgIconsPlugin } from "file:///E:/open-source/V-Admin/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@3.2.5/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import Less2CssVariablePlugin from "file:///E:/open-source/V-Admin/node_modules/.pnpm/registry.npmmirror.com+antd-less-to-css-variable@1.0.5/node_modules/antd-less-to-css-variable/dist/index.js";
import svgLoader from "file:///E:/open-source/V-Admin/node_modules/.pnpm/registry.npmmirror.com+vite-svg-loader@4.0.0/node_modules/vite-svg-loader/index.js";
import viteCompression from "file:///E:/open-source/V-Admin/node_modules/.pnpm/registry.npmmirror.com+vite-plugin-compression@0.5.1_vite@3.2.5/node_modules/vite-plugin-compression/dist/index.mjs";

// src/utils/env.js
function formatEnv(envObj) {
  const result = {};
  for (const [key, val] of Object.entries(envObj)) {
    let realVal = val === "true" ? true : val === "false" ? false : val;
    if (key === "VITE_PORT") {
      realVal = Number(realVal);
    }
    result[key] = realVal;
    process.env[key] = realVal;
  }
  return result;
}

// vite.config.js
var __vite_injected_original_dirname = "E:\\open-source\\V-Admin";
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd());
  const envConf = formatEnv(env);
  return {
    base: "./",
    resolve: {
      alias: {
        "@": resolve(__vite_injected_original_dirname, "./src")
      }
    },
    server: {
      open: true,
      host: true,
      port: envConf.VITE_PORT,
      proxy: {
        "/api": {
          target: "http://10.10.10.49/api",
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api/, "")
        }
      }
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true,
          additionalData: `
            @import "@/style/variable.less";
            @import "@/style/mixin.less";
          `,
          plugins: [new Less2CssVariablePlugin()]
        }
      }
    },
    plugins: [
      vue(),
      vueJsx(),
      createSvgIconsPlugin({
        iconDirs: [resolve(process.cwd(), "src/assets/svg")],
        symbolId: "icon-[dir]-[name]"
      }),
      svgLoader(),
      envConf.VITE_OPEN_GZIP && viteCompression({
        deleteOriginFile: false,
        threshold: 10240,
        algorithm: "gzip",
        ext: ".gz"
      })
    ],
    optimizeDeps: {
      include: ["pinia", "ant-design-vue/es/locale/zh_CN", "dayjs", "mitt", "echarts"]
    },
    build: {
      sourcemap: true,
      chunkSizeWarningLimit: 4e3,
      minify: "esbuild",
      rollupOptions: {
        output: {
          chunkFileNames: "assets/js/[name]-[hash].js",
          entryFileNames: "assets/js/[name]-[hash].js",
          assetFileNames: "assets/[ext]/[name]-[hash].[ext]"
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
